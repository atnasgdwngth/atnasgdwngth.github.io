"use strict";(self.webpackChunkreact_ssr_webpack_plugin_doc=self.webpackChunkreact_ssr_webpack_plugin_doc||[]).push([[944],{6002:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:4},l="Server side versioning",u={unversionedId:"server-side-versioning",id:"server-side-versioning",title:"Server side versioning",description:"Background",source:"@site/docs/server-side-versioning.md",sourceDirName:".",slug:"/server-side-versioning",permalink:"/react-ssr-webpack-plugin/docs/server-side-versioning",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/server-side-versioning.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"ReactSSREntry",permalink:"/react-ssr-webpack-plugin/docs/api-reference/entry"}},d=[{value:"Background",id:"background",children:[],level:2},{value:"Prerequisite",id:"prerequisite",children:[],level:2}],p={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server-side-versioning"},"Server side versioning"),(0,a.kt)("h2",{id:"background"},"Background"),(0,a.kt)("p",null,"Practically, when we deploy the client build, all static assets' filename must have a hash. This is for not only the long-term caching purpose but also the version travelling. It means you can revisit previous or preview upcoming build anytime without a second deployment. When there is a live site issue, you can rollback your PROD build instantly by invalidating the static path such as index.html in the CDN cache. We can apply the same strategy into the server build and think about node.js is a browser. Then you do not need to restart the server on each deployment if node.js version does not change."),(0,a.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"Must not"))," use any singleton pattern",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For example, the store on server side is instantiated once and shared with different requests. You may leak some sensitive information to other request."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"To identify it, you can think about if there is a variable which is created once AND shared AND lives until the application exit."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"Each request should go through all the variable creation progress."))),(0,a.kt)("li",{parentName:"ul"},"Make the good use of ",(0,a.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/context.html"},"React Context")," to store global things on each incoming request."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"Must not"))," have ",(0,a.kt)("inlineCode",{parentName:"li"},"externals: [nodeExternals()]")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"webpack.config.js"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"node.js can require the new server build on the fly without a restart."),(0,a.kt)("li",{parentName:"ul"},"This allows node.js to run two versions of server build which depends on a package in different major versions at the same time."))),(0,a.kt)("li",{parentName:"ul"},"web-framework-related logic and application logic need to separate from each other.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"web framework logic includes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expressjs"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"polka")),(0,a.kt)("li",{parentName:"ul"},"Parse and convert request parameters e.g. query string, request headers, cookies... to a plain object"),(0,a.kt)("li",{parentName:"ul"},"Call and pass the plain object to server entry"),(0,a.kt)("li",{parentName:"ul"},"Reponse HTML from the entry execution result"))),(0,a.kt)("li",{parentName:"ul"},"app logic includes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Data fetching"),(0,a.kt)("li",{parentName:"ul"},"Store initialization"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"renderToStaticMarkup")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"renderToString")),(0,a.kt)("li",{parentName:"ul"},"Define ",(0,a.kt)("inlineCode",{parentName:"li"},"<head>")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"<body>"))))))))}c.isMDXComponent=!0}}]);